#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import subprocess
import sys
import xmlrpc.client as n4dclient
import ssl
import time
import random


class LlxUpAutoUpgrade():

	def __init__(self):

		self.interval=1800
		self.launchUpgrade()

	#def __init__ 	


	def launchUpgrade(self):

		waitTime1=random.randint(0,self.interval)
		waitTime2=random.randint(0,self.interval)
		sleepTime=waitTime1+waitTime2
		time.sleep(sleepTime)
		if not self._getLockFlavour():
			os.system("lliurex-upgrade -u -n")

	#def launchUpgrade

	def _getLockFlavour(self):

		cmd='lliurex-version -v'
		p=subprocess.Popen(cmd,shell=True,stdout=subprocess.PIPE)
		result=p.communicate()[0]
		lockFlavour=False
		client=False
		desktop=False

		if type(result) is bytes:
			result=result.decode()
		flavours = [ x.strip() for x in result.split(',') ]	
		
		for item in flavours:
			if 'server' in item:
				lockFlavour=False
				break
			elif 'client' in item:
				client=True
			elif 'desktop' in item:
				desktop=True
				
		if client:
			if desktop:
				if self._checkIsConnectionWithServer():
					lockFlavour=True
			else:
				lockFlavour=True
							
		return lockFlavour

	#def _getLockFlavour

	def _checkIsConnectionWithServer(self):

		try:
			context=ssl._create_unverified_context()
			client=n4dclient.ServerProxy('https://server:9779',context=context,allow_none=True)
			test=client.is_alive('','MirrorManager')
			return True
		except Exception as e:
			return False

	#def _checkIsConnectionWithServer
	
#def LlxUpAutoUpgrade

llxupAutoUpgrade=LlxUpAutoUpgrade()		

